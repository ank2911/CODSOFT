import React, { useState, useEffect } from 'react';
import { Form, Button, Modal, Dropdown, Container, Row, Col } from 'react-bootstrap';

const categories = [
  { name: 'Business', price: 5 },
  { name: 'Technology', price: 10 },
  { name: 'Sports', price: 8 },
  { name: 'Entertainment', price: 7 },
];

const subscriptionOptions = {
  online: 10,
  hardcopy: 20,
  both: 25,
};

const SubscriptionForm = ({ onSubmit, show, onHide, subscriptionType }) => {
  const [billingAddress, setBillingAddress] = useState('');
  const [shippingAddress, setShippingAddress] = useState('');
  const [sameAsBilling, setSameAsBilling] = useState(false);

  useEffect(() => {
    if (sameAsBilling) {
      setShippingAddress(billingAddress);
    } else {
      setShippingAddress('');
    }
  }, [sameAsBilling, billingAddress]);

  const handleSubmit = (e) => {
    e.preventDefault();
    // Perform validation and payment process here
    onSubmit({ billingAddress, shippingAddress });
  };

  return (
    <Modal show={show} onHide={onHide}>
      <Modal.Header closeButton>
        <Modal.Title>Subscription Form</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        <Form onSubmit={handleSubmit}>
          <Form.Group controlId="formBillingAddress">
            <Form.Label>Billing Address</Form.Label>
            <Form.Control
              type="text"
              value={billingAddress}
              onChange={(e) => setBillingAddress(e.target.value)}
              required
            />
          </Form.Group>
          {subscriptionType !== 'online' && (
            <>
              <Form.Group controlId="formSameAsBilling">
                <Form.Check
                  type="checkbox"
                  label="Same as billing address"
                  checked={sameAsBilling}
                  onChange={() => setSameAsBilling(!sameAsBilling)}
                />
              </Form.Group>
              <Form.Group controlId="formShippingAddress">
                <Form.Label>Shipping Address</Form.Label>
                <Form.Control
                  type="text"
                  value={shippingAddress}
                  onChange={(e) => setShippingAddress(e.target.value)}
                  required={!sameAsBilling}
                  disabled={sameAsBilling}
                />
              </Form.Group>
            </>
          )}
          <Button variant="primary" type="submit" className="mt-3">
            Pay Now
          </Button>
        </Form>
      </Modal.Body>
    </Modal>
  );
};

const Subscription = () => {
  const [subscriptionType, setSubscriptionType] = useState('');
  const [selectedCategories, setSelectedCategories] = useState([]);
  const [totalPrice, setTotalPrice] = useState(0);
  const [showForm, setShowForm] = useState(false);

  useEffect(() => {
    const categoriesPrice = selectedCategories.reduce((acc, category) => acc + category.price, 0);
    const subscriptionPrice = subscriptionOptions[subscriptionType] || 0;
    setTotalPrice(categoriesPrice + subscriptionPrice);
  }, [selectedCategories, subscriptionType]);

  const handleCategoryChange = (category) => {
    setSelectedCategories((prev) =>
      prev.includes(category) ? prev.filter((c) => c !== category) : [...prev, category]
    );
  };

  const handleSubmit = (formData) => {
    console.log('Form submitted:', formData);
    setShowForm(false);
  };

  return (
    <Container>
      <Row>
        <Col>
          <Dropdown onSelect={(key) => setSubscriptionType(key)}>
            <Dropdown.Toggle variant="success" id="dropdown-basic">
              Select Subscription Type
            </Dropdown.Toggle>
            <Dropdown.Menu>
              <Dropdown.Item eventKey="online">Online - $10/month</Dropdown.Item>
              <Dropdown.Item eventKey="hardcopy">Hardcopy - $20/month</Dropdown.Item>
              <Dropdown.Item eventKey="both">Both - $25/month</Dropdown.Item>
            </Dropdown.Menu>
          </Dropdown>
        </Col>
      </Row>
      {subscriptionType && (
        <Row className="mt-3">
          <Col>
            <Form.Group controlId="formCategories">
              <Form.Label>Select Categories</Form.Label>
              {categories.map((category) => (
                <Form.Check
                  key={category.name}
                  type="checkbox"
                  label={`${category.name} - $${category.price}`}
                  checked={selectedCategories.includes(category)}
                  onChange={() => handleCategoryChange(category)}
                />
              ))}
            </Form.Group>
            <div className="mt-3">
              <strong>Total Price: ${totalPrice}</strong>
            </div>
            <Button variant="primary" className="mt-3" onClick={() => setShowForm(true)}>
              Proceed to Payment
            </Button>
          </Col>
        </Row>
      )}
      <SubscriptionForm
        onSubmit={handleSubmit}
        show={showForm}
        onHide={() => setShowForm(false)}
        subscriptionType={subscriptionType}
      />
    </Container>
  );
};

export default Subscription;
import React, { useState, useEffect } from 'react';
import { Form, Button, Modal, Dropdown, Container, Row, Col } from 'react-bootstrap';

const categories = [
  { name: 'Business', price: 5 },
  { name: 'Technology', price: 10 },
  { name: 'Sports', price: 8 },
  { name: 'Entertainment', price: 7 },
];

const subscriptionOptions = {
  online: 10,
  hardcopy: 20,
  both: 25,
};

const SubscriptionForm = ({ onSubmit, show, onHide, subscriptionType }) => {
  const [billingAddress, setBillingAddress] = useState('');
  const [shippingAddress, setShippingAddress] = useState('');
  const [sameAsBilling, setSameAsBilling] = useState(false);

  useEffect(() => {
    if (sameAsBilling) {
      setShippingAddress(billingAddress);
    } else {
      setShippingAddress('');
    }
  }, [sameAsBilling, billingAddress]);

  const handleSubmit = (e) => {
    e.preventDefault();
    // Perform validation and payment process here
    onSubmit({ billingAddress, shippingAddress });
  };

  return (
    <Modal show={show} onHide={onHide}>
      <Modal.Header closeButton>
        <Modal.Title>Subscription Form</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        <Form onSubmit={handleSubmit}>
          <Form.Group controlId="formBillingAddress">
            <Form.Label>Billing Address</Form.Label>
            <Form.Control
              type="text"
              value={billingAddress}
              onChange={(e) => setBillingAddress(e.target.value)}
              required
            />
          </Form.Group>
          {subscriptionType !== 'online' && (
            <>
              <Form.Group controlId="formSameAsBilling">
                <Form.Check
                  type="checkbox"
                  label="Same as billing address"
                  checked={sameAsBilling}
                  onChange={() => setSameAsBilling(!sameAsBilling)}
                />
              </Form.Group>
              <Form.Group controlId="formShippingAddress">
                <Form.Label>Shipping Address</Form.Label>
                <Form.Control
                  type="text"
                  value={shippingAddress}
                  onChange={(e) => setShippingAddress(e.target.value)}
                  required={!sameAsBilling}
                  disabled={sameAsBilling}
                />
              </Form.Group>
            </>
          )}
          <Button variant="primary" type="submit" className="mt-3">
            Pay Now
          </Button>
        </Form>
      </Modal.Body>
    </Modal>
  );
};

const Subscription = () => {
  const [subscriptionType, setSubscriptionType] = useState('');
  const [selectedCategories, setSelectedCategories] = useState([]);
  const [totalPrice, setTotalPrice] = useState(0);
  const [showForm, setShowForm] = useState(false);

  useEffect(() => {
    const categoriesPrice = selectedCategories.reduce((acc, category) => acc + category.price, 0);
    const subscriptionPrice = subscriptionOptions[subscriptionType] || 0;
    setTotalPrice(categoriesPrice + subscriptionPrice);
  }, [selectedCategories, subscriptionType]);

  const handleCategoryChange = (category) => {
    setSelectedCategories((prev) =>
      prev.includes(category) ? prev.filter((c) => c !== category) : [...prev, category]
    );
  };

  const handleSubmit = (formData) => {
    console.log('Form submitted:', formData);
    setShowForm(false);
  };

  return (
    <Container>
      <Row>
        <Col>
          <Dropdown onSelect={(key) => setSubscriptionType(key)}>
            <Dropdown.Toggle variant="success" id="dropdown-basic">
              Select Subscription Type
            </Dropdown.Toggle>
            <Dropdown.Menu>
              <Dropdown.Item eventKey="online">Online - $10/month</Dropdown.Item>
              <Dropdown.Item eventKey="hardcopy">Hardcopy - $20/month</Dropdown.Item>
              <Dropdown.Item eventKey="both">Both - $25/month</Dropdown.Item>
            </Dropdown.Menu>
          </Dropdown>
        </Col>
      </Row>
      {subscriptionType && (
        <Row className="mt-3">
          <Col>
            <Form.Group controlId="formCategories">
              <Form.Label>Select Categories</Form.Label>
              {categories.map((category) => (
                <Form.Check
                  key={category.name}
                  type="checkbox"
                  label={`${category.name} - $${category.price}`}
                  checked={selectedCategories.includes(category)}
                  onChange={() => handleCategoryChange(category)}
                />
              ))}
            </Form.Group>
            <div className="mt-3">
              <strong>Total Price: ${totalPrice}</strong>
            </div>
            <Button variant="primary" className="mt-3" onClick={() => setShowForm(true)}>
              Proceed to Payment
            </Button>
          </Col>
        </Row>
      )}
      <SubscriptionForm
        onSubmit={handleSubmit}
        show={showForm}
        onHide={() => setShowForm(false)}
        subscriptionType={subscriptionType}
      />
    </Container>
  );
};

export default Subscription;
