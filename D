import { configureStore } from '@reduxjs/toolkit';
import cartReducer from './features/cart/cartSlice';

const store = configureStore({
  reducer: {
    cart: cartReducer,
  },
});

export default store;





import { createSlice } from '@reduxjs/toolkit';

const cartSlice = createSlice({
  name: 'cart',
  initialState: [],
  reducers: {
    addToCart: (state, action) => {
      const item = state.find((product) => product.id === action.payload.id);
      if (item) {
        item.quantity += 1;
      } else {
        state.push({ ...action.payload, quantity: 1 });
      }
    },
    removeFromCart: (state, action) => {
      return state.filter((product) => product.id !== action.payload);
    },
    increaseQuantity: (state, action) => {
      const item = state.find((product) => product.id === action.payload);
      if (item) {
        item.quantity += 1;
      }
    },
    decreaseQuantity: (state, action) => {
      const item = state.find((product) => product.id === action.payload);
      if (item && item.quantity > 1) {
        item.quantity -= 1;
      }
    },
  },
});

export const { addToCart, removeFromCart, increaseQuantity, decreaseQuantity } = cartSlice.actions;
export default cartSlice.reducer;




import React from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { Button, Drawer, List, ListItem, ListItemText, Typography } from '@mui/material';
import { removeFromCart, increaseQuantity, decreaseQuantity } from './features/cart/cartSlice';

function Cart({ open, onClose }) {
  const cart = useSelector((state) => state.cart);
  const dispatch = useDispatch();

  const getTotalPrice = (cart) => cart.reduce((total, item) => total + item.price * item.quantity, 0);

  return (
    <Drawer anchor="right" open={open} onClose={onClose}>
      <List style={{ width: 300 }}>
        {cart.map((item) => (
          <ListItem key={item.id}>
            <ListItemText primary={item.title} secondary={`$${item.price}`} />
            <Button onClick={() => dispatch(decreaseQuantity(item.id))}>-</Button>
            <Typography>{item.quantity}</Typography>
            <Button onClick={() => dispatch(increaseQuantity(item.id))}>+</Button>
            <Button onClick={() => dispatch(removeFromCart(item.id))}>Remove</Button>
          </ListItem>
        ))}
        <ListItem>
          <ListItemText primary="Total" />
          <Typography>${getTotalPrice(cart)}</Typography>
        </ListItem>
        <ListItem>
          <Button variant="contained" color="primary">Checkout</Button>
        </ListItem>
      </List>
    </Drawer>
  );
}

export default Cart;

